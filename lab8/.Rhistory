ls
cd
getwd
getwd()
install.packages("network")
install.packages(c("BH", "bindr", "bindrcpp", "broom", "car", "caret", "cluster", "ddalpha", "glmnet", "knitr", "lava", "lfe", "lme4", "lubridate", "Matrix", "pillar", "plogr", "psych", "quantreg", "Rcpp", "RcppEigen", "rlang", "sfsmisc", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "timeDate", "viridis", "viridisLite", "visreg", "withr", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(quanteda)
library(tidyverse)
library(RColorBrewer)
library(stm)
install.packages("pillar")
install.packages("pillar")
install.packages("rlang")
# clear all
install.packages("quanteda")
# clear all
install.packages("quanteda")
library(tidyverse)
# clear all
install.packages("rtools")
install.packages("quanteda")
install.packages("stm")
installed.packages("tidyverse")
installed.packages("RColorBrewer")
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
# clear all
install.packages("rtools")
install.packages("quanteda", dependencies=TRUE)
remove.packages(IRkernel)
remove.packages('IRkernel')
install.packages("quanteda", dependencies=TRUE)
install.packages("XML")
install.packages("stm", dependencies=TRUE)
install.packages("sotu")
library(sotu)
#data structure
sotu <- data.frame(cbind(sotu_text, sotu_meta), stringsAsFactors=FALSE)
sotu$sotu_text <- as.character(sotu$sotu_text)
View(sotu)
sotu_text_data <- PrepText(sotu, textvar="sotu_text", groupvar="president", node_type="groups", remove_stop_words=TRUE, stem=TRUE)
#packages needed
install.packages("devtools")
library(devtools)
install_github("cbail/textnets")
library(textnets)
library(devtools)
library(devtools)
#packages needed
install.packages("devtools")
install.packages('git2r')
install.packages("quanteda")
#dependencies="TRUE")
install.packages("tidyverse", dependencies="TRUE")
install.packages("RColorBrewer", dependencies="TRUE")
install.packages("stm", dependencies="TRUE")
install.packages("igraph")
install.packages("installr")
#library(stm)
#if(!require(devtools)) install.packages("devtools")
#library(devtools)
install_github("bstewart/stm",dependencies=TRUE)
# clear all
rm(list = ls())
library(quanteda)
library(quanteda)
library(tidyverse)
library(RColorBrewer)
library(stm)
setwd("~/Dropbox/coursework/2018Spring/soc220_spring2018/Github_labs/lab8")
#######################################################################################
# READ FROM EXCEL MY DATA
library(readxl)
efr_tm <- read_excel("efr_tm.xlsx")
# create a corpus object
corpus_object <- corpus(efr_tm)
doc_freq_matrix <- dfm(corpus_object,
#stop words
remove = c(stopwords("english")),
#specify length of n-grams
ngrams=1L,
#stemmer? (porter)
stem = F,
#remove misc
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE)
#
trim_doc_freq_matrix <- dfm_trim(doc_freq_matrix, min_docfreq = 2)
# lastly, trim that matrix to remove uncommon or too common words
#trim_doc_freq_matrix <- dfm_trim(doc_freq_matrix, max_docfreq=.90, min_docfreq = 2)
#structural topic model object from trimmed dtm
texts_stm <- convert(trim_doc_freq_matrix, to = 'stm')
#``````````````
#` prep documents object which takes three arguments:
#`1. documents
#`2. the total vocabulary
#`3. meta data
#`4. lastly has another threshold if you wish to remove based on plot removed
#````
prep_docs_object <- prepDocuments(texts_stm$documents, texts_stm$vocab,
texts_stm$meta, lower.thresh = 10, verbose=TRUE)
#
trim_doc_freq_matrix <- dfm_trim(doc_freq_matrix, max_docfreq=70, min_docfreq = 2)
#structural topic model object from trimmed dtm
texts_stm <- convert(trim_doc_freq_matrix, to = 'stm')
#``````````````
#` prep documents object which takes three arguments:
#`1. documents
#`2. the total vocabulary
#`3. meta data
#`4. lastly has another threshold if you wish to remove based on plot removed
#````
prep_docs_object <- prepDocuments(texts_stm$documents, texts_stm$vocab,
texts_stm$meta, lower.thresh = 10, verbose=TRUE)
#fit stm, FINALLY!
fit_stm <- stm(documents = texts_stm$documents,
vocab = texts_stm$vocab,
K = 7,
#covariates
prevalence = ~ monarch + war,
seed = 02138,
data = texts_stm$meta
)
summary(fit_stm)
#plot frequent words for given topics
plot.STM(fit_stm, type = "labels")
#plot topic proportions over whole corpus
plot.STM(fit_stm, type = "summary")
#histogram of the topics
plot(fit_stm, type="hist")
plot(fit_stm, type = 'labels', topics = c(2, 4:5), labeltype = 'frex', main = 'FREX')
plot(fit_stm, type = 'labels', topics = c(2, 2:3), labeltype = 'score', main = 'score')
par(mfrow = c(1,2))
plot(fit_stm, type = 'labels', topics = c(2, 4:5), labeltype = 'frex', main = 'FREX')
plot(fit_stm, type = 'labels', topics = c(2, 2:3), labeltype = 'score', main = 'score')
par(mfrow = c(1,1))
plot(fit_stm, type = 'perspectives',topics = c(1,2))
plot(fit_stm, type = 'perspectives',topics = c(2,3))
plot(fit_stm, type = 'perspectives',topics = c(3,4))
topic_corr = topicCorr(fit_stm)
topic_corr = topicCorr(fit_stm)
plot(topic_corr)
#for a given outcome, we can plot differences in select topic proportions
#which topics are predicted by war
est_stm <- estimateEffect( ~ war, fit_stm, metadata = texts_stm$meta)
summary(est_stm)
plot(est_stm, covariate = 'war', topics = 1:9, model = fit_stm)
plot(est_stm, covariate = 'war', topics = 1:9, model = fit_stm)
#for a given outcome, we can plot differences in select topic proportions
#which topics are predicted by war
est_stm <- estimateEffect( ~ war, fit_stm, metadata = texts_stm$meta)
summary(est_stm)
plot(est_stm, covariate = 'war', topics = 1:9, model = fit_stm)
plot(est_stm, covariate = 'war', topics = 1:7, model = fit_stm)
efrSelectModel <- selectModel(texts_stm$documents,
texts_stm$vocab,
K=10,
#other covariates
prevalence=~monarch+war,
max.em.its=75,
data=texts_stm$meta,
runs=20,
seed=02138
)
# semantic coherence (like cosine similarity of words in topic)
#by exclusivility (only want certain words within topic)
plotModels(efrSelectModel)
# Choose model #1
fit_stm_model1 <- efrSelectModel$runout[[10]]
# Choose model #1
fit_stm_model1 <- efrSelectModel$runout[[4]]
#takes in formula, fit model, metadata
est_stm2 <- estimateEffect(1:10 ~ war + monarch,
fit_stm_model1,
metadata = texts_stm$meta)
summary(est_stm2)
summary(est_stm2)
summary(est_stm2)
#plot the estimate, choose covariate to especially examine
plot(est_stm2, topics=2:3,covariate = 'monarch', model = fit_stm_model1)
source('~/Dropbox/coursework/2018Spring/soc220_spring2018/Github_Labs/lab8/lab8_stm.R')
